server:
  port: 2002

spring:
  application:
    name: seata-storage-service
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://192.168.153.136:3306/seata_storage
    username: root
    password: root
  cloud:
    nacos:
      discovery:
        server-addr: 192.168.153.136

#seata1.4.2
seata:
  #事务群组（可以每个应用独立取名，也可以使用相同的名字），
  #要与服务端nacos-config.txt中service.vgroup_mapping中存在,并且要保证多个群组情况下后缀名要保持一致-tx_group
  enabled: true
  enable-auto-data-source-proxy: true #是否开启数据源自动代理,默认为true
  tx-service-group: my_test_tx_group  #要与nacos配置文件中的vgroupMapping一致,在nacos配置中心查看
  registry: #registry根据seata服务端的registry配置
    type: nacos #默认为file
    nacos:
      application: seata-server #配置自己的seata服务
      server-addr: ${spring.cloud.nacos.discovery.server-addr} #根据自己的seata服务配置
      username: nacos #根据自己的seata服务配置
      password: nacos #根据自己的seata服务配置
      cluster: default # 配置自己的seata服务cluster, 默认为 default
      group: SEATA_GROUP #根据自己的seata服务配置
      namespace: 3e921bf9-183b-49d7-8f94-c959c11badb0 #改为自己的nacos的namespace,这里填写的是刚才创建seata命名空间的id
    config:
      type: nacos #默认file,如果使用file不配置下面的nacos,直接配置seata.service
      nacos:
        server-addr: ${spring.cloud.nacos.discovery.server-addr} #配置自己的nacos地址
        group: SEATA_GROUP #配置自己的dev
        username: nacos #配置自己的username
        password: nacos #配置自己的password
        dataId: seataServer.properties # #配置自己的dataId,由于搭建服务端时把客户端的配置也写在了seataServer.properties,所以这里用了和服务端一样的配置文件,实际客户端和服务端的配置文件分离出来更好
        namespace: 3e921bf9-183b-49d7-8f94-c959c11badb0 #改为自己的nacos的namespace,这里填写的是刚才创建seata命名空间的id


mybatis-plus:
  mapper-locations:
    - classpath:mapper/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  #设置表的前缀
  global-config:
    db-config:
      table-prefix: t_